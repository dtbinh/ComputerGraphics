I finished all the features required. Besides, I use the Blend Function to make the water transparent, add a floor under the pool and also bind a texture to it.
I use the display list to draw the pool and the vertex array for the water surface. The vertice, triangles and normals for the pool are all calculated in the initialize function. For the normal vectors, I calculated the normal vector for each triangle and record it into each vertex of the triangle. And after that, calculate the average for each vertex. For the water surface, the vertice and triangles are generated in the initialize function and updated upon the time in the update function. The normal vectors are also updated in the update function. All the drawing part is done in the render function.
The resolution of the surface now is 256*256. The frame rate can reach 60fps. It can be change in project.cpp: In the constructor of OpenglProject, change the variable SIZE.
The problem I used to have was when you move the camera left or right by A/D, the smoothness of the water is different. On the left, the triangles can be clearly see while on the right, it is quite smooth. I found it was the problem of the order of drawing triangles, So I switch the order of the two layers of for loops then it was perfectly solved. Another question used to have is the precision problem. I don't know if it only appears in C++ or other languages as well. So instead of using the doubles as the positions and for loop indice at the same time, I change the indice to integers and calculate the position inside the for loop which solve the precision problem caused by doubles.  